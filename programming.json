[{"fileName": "20190103.r.html", "title": "A Quick Introduction R", "intro": "R is a programming language and free software environment for statistical computing and graphics that is supported by the R Foundation for Statistical Computing. The R language is\n                        w"}, {"fileName": "20190101.python.html", "title": "A Quick Introduction Python", "intro": "This series of blogs on Python were compiled as I was trying to learn the language. I will present them here, for someone who might want a quick introduction to the language, without\n            digging th"}, {"fileName": "20180226.oointerpreter.html", "title": "Interpret Design Pattern", "intro": "In real life, an interpreter is one who translates one language into another. On similar lines, the interpreter pattern is useful when we have data in another language - perhaps an XML/JSON or some incomin"}, {"fileName": "20180225.oocommand.html", "title": "Command Design Pattern", "intro": "We have all visited doctors at some point in our life. After due checkup, the doctor diagnosed the disease and prescribed some pills that we obtained from the pharmacy. The pharmacist hands over the pills "}, {"fileName": "20180224.oochainofresponsibility.html", "title": "Chain of Responsibility Design Pattern", "intro": "A typical IT company has developers, testers, managers, sales and marketing teams and various different departments. These roles often overlap in small companies (<100 employees), but in some of the bigger"}, {"fileName": "20180223.ooproxy.html", "title": "Proxy Design Pattern", "intro": "Most of us have used a proxy server to access the internet. An HTTP proxy server is essentially a server on our campus, that controls all the HTTP requests made to the outside world. An HTTP request that I"}, {"fileName": "20180222.ooflyweight.html", "title": "Flyweight Design Pattern", "intro": "We often encounter a situation where we need to create too many instances of a given class. If such an object is complex , and its creation requires a lot of computation, this can create performance issues"}, {"fileName": "20180221.oofacade.html", "title": "Fa&ccedil;ade Pattern", "intro": "A real life application is never implemented as a monolithic block. That is a sure way to disaster. The application should be divided into multiple subsystems that interact with each other according to a d"}, {"fileName": "20180220.oodecorator.html", "title": "Decorator Pattern", "intro": "As the name suggests, a Decorator \"decorates\" a class. The code is pretty similar to a container class. But the concept is different. A decorator is used when we want to add a lot more functionality to the"}, {"fileName": "20180219.oocomposite.html", "title": "Composite Pattern", "intro": "When we think of object oriented programming, we think of inheritance. But inheritance is not always the best way of attacking a problem. Inheritance should be used only when the a class inherits from the "}, {"fileName": "20180217.ooadapter.html", "title": "Adapter Pattern", "intro": "As the name suggests, the Adapter pattern allows us to adapt the available interface to what we need. A voltage adapter helps us obtain 110V out of a 230V socket. Similarly, the Adapter pattern provides fo"}, {"fileName": "20180216.ooabstractfactory.html", "title": "Abstract Factory", "intro": "The Abstract Factory pattern is another level of abstraction above the Factory pattern. The Factory pattern provides for a Factory object that can be used to instantiate product objects based on the parame"}, {"fileName": "20180215.ooprototype.html", "title": "Prototype Pattern", "intro": "This creational pattern addresses another design problem. There are times when instantiating an object is a very costly operation. It is not possible to go through the entire process again and again. At th"}, {"fileName": "20180214.oobuilder.html", "title": "Builder Battern", "intro": "One of the principles of good design is that we do not crunch too much complexity into a single unit of the code, and any unit of the code is always focused on a consistent isolated part of the functionali"}, {"fileName": "20180213.oosingleton.html", "title": "The Singleton Patterns", "intro": "This is one of the simplest of the Creation Patterns. Singleton is a class that has only one instance - and cannot have more instances. This is useful when we want to contain a consistent functionality for"}, {"fileName": "20180212.oofactorymethod.html", "title": "Factory Method Design Pattern", "intro": "This is the most fundamental creational pattern. All others are extensions of this pattern.</"}, {"fileName": "20180211.solid.html", "title": "SOLID Design Principles", "intro": "Every developer has experienced the joy of working on an application where things just work like a breeze; and also the pain of an application that collapses like a pack of cards on the slightest code chan"}, {"fileName": "20180210.introductiontoooad.html", "title": "Introduction to OOAD", "intro": "Any application requirement can be seen in two different views leading to different approaches towards extracting components for design and development. First approach looks at the requirement in terms of "}, {"fileName": "20180209.oopatterns.html", "title": "Object Oriented Design Patterns", "intro": "Object Oriented design has a lot of hype around it. And a lot of this hype is meaningful. OO design, when used appropriately and correctly, can help us with enforce reusability and maintainability of the s"}, {"fileName": "20180208.regularexpressions.html", "title": "Regular Expressions", "intro": "Developers often encounter a requirement where we need to check if the contents of a string follow a particular pattern. For example, we might want to know if the string contains any white space, or any no"}, {"fileName": "20180207.sorting.html", "title": "Sorting Algorithms", "intro": "Sorting is the other fundamental operation that loads any computational process. Let us look at some of the considerations in sorting algorithms</"}, {"fileName": "20180206.search.html", "title": "Search Algorithms", "intro": "There are different types of search algorithms that help us choose between the speed, memory and complexity.</"}, {"fileName": "20180205.datastructures.html", "title": "Data Structures", "intro": "Most algorithms work on data. Naturally, the efficiency of the algorithm depends upon how we lay the data. If the structure of our data is not good, the algorithm could turn out to be a lot costlier. Hence"}, {"fileName": "20180204.falgorithms.html", "title": "Algorithms", "intro": "An algorithm defines a detailed set of steps to obtain a result. An algorithm is a formal definition of these steps that can be implemented in a programming language. It has defined input and outputs, and "}, {"fileName": "20180203.introduction.html", "title": "Introduction to Design Patterns", "intro": "Someone made an interesting statement: \"The earlier you start coding, the more time you take to complete it!\"</"}, {"fileName": "20180202.functionaldesignpatterns.html", "title": "Functional Design Patterns", "intro": "The term Functional Design showed up only with the rise of Object Oriented Design. Till then, it was just the most obvious way of designing an application. It had evolved ground up - from a few hundred lin"}, {"fileName": "20180201.designpatterns.html", "title": "Design Patterns", "intro": "The world of software development is now nearing a century. Over these years, software industry has seen drastic changes in the technologies and domains. Starting from mechanically operated binary switches"}, {"fileName": "20180103.javaapachedbutils.html", "title": "Java Collections Framework", "intro": "Apache Commons DbUtils library is a great utility library designed to simplify JDBC and reducing the problems of resource leak and to have cleaner code. As JDBC resource cleanup is quite\n            tediou"}, {"fileName": "20180102.javaregexp.html", "title": "Java Collections Framework", "intro": "Since JDK 1.4, Java introduced the package java.util.regex - that contains all the classes that aid regular expressions.</"}, {"fileName": "20180102.javareflectionapi.html", "title": "Java Collections Framework", "intro": "Everything in Java is an Object of a Class - including the classes themselves. Any class in Java is an object of java.lang.Class. It is defined its properties and has methods that allow you\n            to "}, {"fileName": "20180101.javacollections.html", "title": "Java Collections Framework", "intro": "The concept of collections is pretty old in the world of programming languages. But the collections framework in Java added a special flavor to it, by providing a perfect abstraction to the\n            fun"}]